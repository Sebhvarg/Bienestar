-- Eliminar base de datos si existe
DROP DATABASE IF EXISTS BienestarEstudiantil;

-- Crear base de datos nueva
CREATE DATABASE BienestarEstudiantil 
CHARACTER SET utf8mb4 
COLLATE utf8mb4_unicode_ci;

USE BienestarEstudiantil;

-- ===========================
-- TABLAS (ordenadas por FK)
-- ===========================

-- Tabla USUARIO
CREATE TABLE USUARIO (
    ID_USUARIO INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_USUARIO VARCHAR(50) NOT NULL UNIQUE,
    CONTRA VARCHAR(200) NOT NULL,
    ROL ENUM('Estudiante','Administrador','Medico') NOT NULL,
    ESTADO BOOLEAN NOT NULL DEFAULT TRUE,
    ULTIMO_LOGIN DATETIME NULL,
    INTENTOS_FALLIDOS INT NOT NULL DEFAULT 0,
    FECHA_CREACION DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Tabla ADMINISTRADOR (1:1 con USUARIO)
CREATE TABLE ADMINISTRADOR (
    ID_ADMINISTRADOR INT AUTO_INCREMENT PRIMARY KEY,
    ID_USUARIO INT NOT NULL UNIQUE,
    NOMBRE VARCHAR(100) NOT NULL,
    APELLIDO VARCHAR(100) NOT NULL,
    CONSTRAINT FK_ADMIN_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO) ON DELETE CASCADE
);

-- Tabla MEDICO (1:1 con USUARIO)
CREATE TABLE MEDICO (
    ID_MEDICO INT AUTO_INCREMENT PRIMARY KEY,
    ID_USUARIO INT NOT NULL UNIQUE,
    NOMBRE VARCHAR(100) NOT NULL,
    APELLIDO VARCHAR(100) NOT NULL,
    ESPECIALIDAD VARCHAR(100) NOT NULL,
    CONSTRAINT FK_MEDICO_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO) ON DELETE CASCADE
);

-- Tabla ESTUDIANTE (1:1 con USUARIO)
CREATE TABLE ESTUDIANTE (
    ID_ESTUDIANTE INT AUTO_INCREMENT PRIMARY KEY,
    ID_USUARIO INT NOT NULL UNIQUE,
    NUMERO_MATRICULA VARCHAR(20) NOT NULL UNIQUE,
    NOMBRE VARCHAR(100) NOT NULL,
    APELLIDO VARCHAR(100) NOT NULL,
    CARRERA VARCHAR(100) NOT NULL,
    FECHA_NACIMIENTO DATE NOT NULL,
    CORREO_ELECTRONICO VARCHAR(100) NOT NULL,
    TELEFONO VARCHAR(20) NULL,
    PROMEDIO_ACADEMICO DECIMAL(5,2) NULL,
    ESTADO BOOLEAN NOT NULL DEFAULT TRUE,
    CONSTRAINT FK_ESTUDIANTE_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO) ON DELETE CASCADE
);

-- Tabla ACTIVIDAD
CREATE TABLE ACTIVIDAD (
    ID_ACTIVIDAD INT AUTO_INCREMENT PRIMARY KEY,
    ID_ADMINISTRADOR INT NOT NULL,
    NOMBRE_ACTIVIDAD VARCHAR(100) NOT NULL,
    DESCRIPCION VARCHAR(500) NULL,
    FECHA_HORA DATETIME NOT NULL,
    CUPO_MAXIMO INT NOT NULL CHECK (CUPO_MAXIMO > 0),
    UBICACION VARCHAR(100) NOT NULL,
    TIPO_ACTIVIDAD VARCHAR(50) NOT NULL,
    CONSTRAINT FK_ACTIVIDAD_ADMIN FOREIGN KEY (ID_ADMINISTRADOR) REFERENCES ADMINISTRADOR(ID_ADMINISTRADOR)
);

-- Tabla BECA
CREATE TABLE BECA (
    ID_BECA INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_BECA VARCHAR(100) NOT NULL,
    DESCRIPCION VARCHAR(500) NULL,
    MONTO DECIMAL(10,2) NOT NULL CHECK (MONTO >= 0),
    REQUISITOS VARCHAR(500) NOT NULL,
    FECHA_INICIO DATE NOT NULL,
    FECHA_FIN DATE NULL
);

-- Tabla SERVICIO_BIENESTAR
CREATE TABLE SERVICIO_BIENESTAR (
    ID_SERVICIO INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_SERVICIO VARCHAR(100) NOT NULL,
    DESCRIPCION VARCHAR(500) NULL,
    DURACION_SESION INT NULL,
    FRECUENCIA_DISPONIBILIDAD VARCHAR(100) NULL,
    ID_PROFESIONAL INT NULL,
    TIPO_PROFESIONAL ENUM('Medico','Psicologo','Tutor') NULL
);

-- Tabla SOLICITUD (referencia a ESTUDIANTE)
CREATE TABLE SOLICITUD (
    ID_SOLICITUD INT AUTO_INCREMENT PRIMARY KEY,
    ID_ESTUDIANTE INT NOT NULL,
    TIPO_SOLICITUD ENUM('Beca','Servicio','Certificado') NOT NULL,
    FECHA_SOLICITUD DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ESTADO ENUM('Pendiente','Aprobada','Rechazada','Cancelada') NOT NULL DEFAULT 'Pendiente',
    CONSTRAINT FK_SOLICITUD_ESTUDIANTE FOREIGN KEY (ID_ESTUDIANTE) REFERENCES ESTUDIANTE(ID_ESTUDIANTE) ON DELETE CASCADE
);

-- Tabla INSCRIPCION (N:M Estudiante-Actividad)
CREATE TABLE INSCRIPCION (
    ID_INSCRIPCION INT AUTO_INCREMENT PRIMARY KEY,
    ID_ESTUDIANTE INT NOT NULL,
    ID_ACTIVIDAD INT NOT NULL,
    FECHA_INSCRIPCION DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ESTADO ENUM('Pendiente','Aprobada','Rechazada','Cancelada') NOT NULL DEFAULT 'Pendiente',
    CONSTRAINT FK_INSCRIPCION_ESTUDIANTE FOREIGN KEY (ID_ESTUDIANTE) REFERENCES ESTUDIANTE(ID_ESTUDIANTE) ON DELETE CASCADE,
    CONSTRAINT FK_INSCRIPCION_ACTIVIDAD FOREIGN KEY (ID_ACTIVIDAD) REFERENCES ACTIVIDAD(ID_ACTIVIDAD) ON DELETE CASCADE,
    CONSTRAINT UQ_INSCRIPCION_EST_ACT UNIQUE (ID_ESTUDIANTE, ID_ACTIVIDAD)
);

-- Tabla SOLICITUD_BECA
CREATE TABLE SOLICITUD_BECA (
    ID_SOLICITUD_BECA INT PRIMARY KEY,
    ID_BECA INT NOT NULL,
    JUSTIFICACION VARCHAR(500) NOT NULL,
    CONSTRAINT FK_SOLICITUDBECA_SOLICITUD FOREIGN KEY (ID_SOLICITUD_BECA) REFERENCES SOLICITUD(ID_SOLICITUD) ON DELETE CASCADE,
    CONSTRAINT FK_SOLICITUDBECA_BECA FOREIGN KEY (ID_BECA) REFERENCES BECA(ID_BECA)
);

-- Tabla SOLICITUD_SERVICIO
CREATE TABLE SOLICITUD_SERVICIO (
    ID_SOLICITUD_SERVICIO INT AUTO_INCREMENT PRIMARY KEY,
    ID_SOLICITUD INT NOT NULL,
    ID_SERVICIO INT NOT NULL,
    ID_MEDICO INT NULL,
    FECHA_PRESTACION DATETIME NOT NULL,
    DIAGNOSTICO TEXT NULL,
    CONSTRAINT FK_SS_SOLICITUD FOREIGN KEY (ID_SOLICITUD) REFERENCES SOLICITUD(ID_SOLICITUD) ON DELETE CASCADE,
    CONSTRAINT FK_SS_SERVICIO FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIO_BIENESTAR(ID_SERVICIO),
    CONSTRAINT FK_SS_MEDICO FOREIGN KEY (ID_MEDICO) REFERENCES MEDICO(ID_MEDICO)
);

-- Tabla ASISTENCIA
CREATE TABLE ASISTENCIA (
    ID_ASISTENCIA INT AUTO_INCREMENT PRIMARY KEY,
    ID_INSCRIPCION INT NOT NULL,
    FECHA_ASISTENCIA DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    VALIDADO_POR INT NULL,
    CONSTRAINT FK_ASISTENCIA_INSCRIPCION FOREIGN KEY (ID_INSCRIPCION) REFERENCES INSCRIPCION(ID_INSCRIPCION),
    CONSTRAINT FK_ASISTENCIA_ADMIN FOREIGN KEY (VALIDADO_POR) REFERENCES ADMINISTRADOR(ID_ADMINISTRADOR)
);

-- Tabla CERTIFICADO
CREATE TABLE CERTIFICADO (
    ID_CERTIFICADO INT AUTO_INCREMENT PRIMARY KEY,
    ID_SOLICITUD INT NOT NULL,
    ID_ACTIVIDAD INT NOT NULL,
    FECHA_EMISION DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ARCHIVO_PDF LONGBLOB NULL,
    CONSTRAINT FK_CERTIFICADO_SOLICITUD FOREIGN KEY (ID_SOLICITUD) REFERENCES SOLICITUD(ID_SOLICITUD),
    CONSTRAINT FK_CERTIFICADO_ACTIVIDAD FOREIGN KEY (ID_ACTIVIDAD) REFERENCES ACTIVIDAD(ID_ACTIVIDAD)
);

-- Tabla AUDITORIA_SOLICITUDES
CREATE TABLE AUDITORIA_SOLICITUDES (
    ID_AUDITORIA INT AUTO_INCREMENT PRIMARY KEY,
    ID_SOLICITUD INT,
    ESTADO_ANTERIOR VARCHAR(20),
    ESTADO_NUEVO VARCHAR(20),
    FECHA_CAMBIO DATETIME DEFAULT CURRENT_TIMESTAMP,
    USUARIO VARCHAR(100) DEFAULT (USER())
);

-- ===========================
-- INDICES
-- ===========================
CREATE INDEX idx_Actividades_Fecha ON ACTIVIDAD (FECHA_HORA);
CREATE INDEX idx_Estudiantes_Nombre ON ESTUDIANTE (NOMBRE, APELLIDO);
CREATE INDEX idx_Solicitudes_Estado ON SOLICITUD (ESTADO, FECHA_SOLICITUD, TIPO_SOLICITUD);
CREATE INDEX idx_Inscripciones_Actividad ON INSCRIPCION (ID_ACTIVIDAD, ID_ESTUDIANTE, ESTADO);

-- ===========================
-- VISTAS
-- ===========================
CREATE VIEW vw_ResumenActividadesEstudiante AS
SELECT 
    E.ID_ESTUDIANTE,
    CONCAT(E.NOMBRE, ' ', E.APELLIDO) AS Estudiante,
    A.NOMBRE_ACTIVIDAD,
    A.FECHA_HORA,
    I.ESTADO AS Estado_Inscripcion,
    ASIS.FECHA_ASISTENCIA
FROM ESTUDIANTE E
JOIN INSCRIPCION I ON E.ID_ESTUDIANTE = I.ID_ESTUDIANTE
JOIN ACTIVIDAD A ON I.ID_ACTIVIDAD = A.ID_ACTIVIDAD
LEFT JOIN ASISTENCIA ASIS ON I.ID_INSCRIPCION = ASIS.ID_INSCRIPCION;

CREATE VIEW vw_SolicitudesPendientes AS
SELECT 
    S.ID_SOLICITUD,
    S.TIPO_SOLICITUD,
    CONCAT(E.NOMBRE, ' ', E.APELLIDO) AS Solicitante,
    S.FECHA_SOLICITUD
FROM SOLICITUD S
JOIN ESTUDIANTE E ON S.ID_ESTUDIANTE = E.ID_ESTUDIANTE
WHERE S.ESTADO = 'Pendiente';

CREATE VIEW vw_HistorialMedico AS
SELECT 
    E.ID_ESTUDIANTE,
    CONCAT(E.NOMBRE, ' ', E.APELLIDO) AS Estudiante,
    SS.FECHA_PRESTACION AS FechaConsulta,
    CONCAT(M.NOMBRE, ' ', M.APELLIDO) AS Medico,
    SS.DIAGNOSTICO
FROM SOLICITUD_SERVICIO SS
JOIN SOLICITUD S ON SS.ID_SOLICITUD = S.ID_SOLICITUD
JOIN ESTUDIANTE E ON S.ID_ESTUDIANTE = E.ID_ESTUDIANTE
JOIN MEDICO M ON SS.ID_MEDICO = M.ID_MEDICO
WHERE S.TIPO_SOLICITUD = 'Servicio';

CREATE VIEW vw_ReporteParticipacion AS
SELECT 
    A.ID_ACTIVIDAD,
    A.NOMBRE_ACTIVIDAD,
    COUNT(I.ID_ESTUDIANTE) AS TotalInscritos,
    COUNT(ASIS.ID_ASISTENCIA) AS TotalAsistentes,
    ROUND((COUNT(ASIS.ID_ASISTENCIA) * 100.0 / NULLIF(COUNT(I.ID_ESTUDIANTE), 0)), 2) AS PorcentajeAsistencia
FROM ACTIVIDAD A
LEFT JOIN INSCRIPCION I ON A.ID_ACTIVIDAD = I.ID_ACTIVIDAD
LEFT JOIN ASISTENCIA ASIS ON I.ID_INSCRIPCION = ASIS.ID_INSCRIPCION
GROUP BY A.ID_ACTIVIDAD, A.NOMBRE_ACTIVIDAD;

-- ===========================
-- PROCEDIMIENTOS ALMACENADOS
-- ===========================

DELIMITER //

-- sp_GestionActividades
CREATE PROCEDURE sp_GestionActividades(
    IN p_Operacion CHAR(1), -- C,R,U,D
    IN p_ID_ACTIVIDAD INT,
    IN p_NOMBRE_ACTIVIDAD VARCHAR(100),
    IN p_DESCRIPCION VARCHAR(500),
    IN p_FECHA_HORA DATETIME,
    IN p_CUPO_MAXIMO INT,
    IN p_UBICACION VARCHAR(100),
    IN p_TIPO_ACTIVIDAD VARCHAR(50),
    IN p_ID_ADMINISTRADOR INT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;
    
    START TRANSACTION;
    
    CASE p_Operacion
        WHEN 'C' THEN
            INSERT INTO ACTIVIDAD (ID_ADMINISTRADOR, NOMBRE_ACTIVIDAD, DESCRIPCION, FECHA_HORA, CUPO_MAXIMO, UBICACION, TIPO_ACTIVIDAD)
            VALUES (p_ID_ADMINISTRADOR, p_NOMBRE_ACTIVIDAD, p_DESCRIPCION, p_FECHA_HORA, p_CUPO_MAXIMO, p_UBICACION, p_TIPO_ACTIVIDAD);
            SELECT LAST_INSERT_ID() AS NewId;
            
        WHEN 'R' THEN
            SELECT * FROM ACTIVIDAD 
            WHERE ID_ACTIVIDAD = p_ID_ACTIVIDAD OR p_ID_ACTIVIDAD IS NULL;
            
        WHEN 'U' THEN
            UPDATE ACTIVIDAD SET
                NOMBRE_ACTIVIDAD = IFNULL(p_NOMBRE_ACTIVIDAD, NOMBRE_ACTIVIDAD),
                DESCRIPCION = IFNULL(p_DESCRIPCION, DESCRIPCION),
                FECHA_HORA = IFNULL(p_FECHA_HORA, FECHA_HORA),
                CUPO_MAXIMO = IFNULL(p_CUPO_MAXIMO, CUPO_MAXIMO),
                UBICACION = IFNULL(p_UBICACION, UBICACION),
                TIPO_ACTIVIDAD = IFNULL(p_TIPO_ACTIVIDAD, TIPO_ACTIVIDAD)
            WHERE ID_ACTIVIDAD = p_ID_ACTIVIDAD;
            
        WHEN 'D' THEN
            DELETE FROM ACTIVIDAD WHERE ID_ACTIVIDAD = p_ID_ACTIVIDAD;
            
    END CASE;
    
    COMMIT;
END //

-- sp_GestionSolicitudesBecas
CREATE PROCEDURE sp_GestionSolicitudesBecas(
    IN p_Operacion CHAR(1), -- C=Crear, R=Leer, U=Actualizar
    IN p_ID_SOLICITUD INT,
    IN p_ID_ESTUDIANTE INT,
    IN p_ID_BECA INT,
    IN p_JUSTIFICACION VARCHAR(500),
    IN p_ESTADO VARCHAR(20)
)
BEGIN
    DECLARE v_ID_SOL INT;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;
    
    START TRANSACTION;
    
    CASE p_Operacion
        WHEN 'C' THEN
            INSERT INTO SOLICITUD (ID_ESTUDIANTE, TIPO_SOLICITUD) VALUES (p_ID_ESTUDIANTE, 'Beca');
            SET v_ID_SOL = LAST_INSERT_ID();
            INSERT INTO SOLICITUD_BECA (ID_SOLICITUD_BECA, ID_BECA, JUSTIFICACION) VALUES (v_ID_SOL, p_ID_BECA, p_JUSTIFICACION);
            SELECT v_ID_SOL AS ID_SOLICITUD;
            
        WHEN 'R' THEN
            SELECT SB.ID_SOLICITUD_BECA, S.ID_ESTUDIANTE, CONCAT(E.NOMBRE, ' ', E.APELLIDO) AS Estudiante, 
                   B.NOMBRE_BECA, SB.JUSTIFICACION, S.ESTADO AS Estado_Solicitud
            FROM SOLICITUD_BECA SB
            JOIN SOLICITUD S ON SB.ID_SOLICITUD_BECA = S.ID_SOLICITUD
            JOIN BECA B ON SB.ID_BECA = B.ID_BECA
            JOIN ESTUDIANTE E ON S.ID_ESTUDIANTE = E.ID_ESTUDIANTE
            WHERE SB.ID_SOLICITUD_BECA = p_ID_SOLICITUD OR p_ID_SOLICITUD IS NULL;
            
        WHEN 'U' THEN
            UPDATE SOLICITUD SET ESTADO = p_ESTADO WHERE ID_SOLICITUD = p_ID_SOLICITUD;
            
    END CASE;
    
    COMMIT;
END //

-- sp_GestionCitasMedicas
CREATE PROCEDURE sp_GestionCitasMedicas(
    IN p_Operacion CHAR(1), -- C,R,U
    IN p_ID_SOLICITUD_SERVICIO INT,
    IN p_ID_ESTUDIANTE INT,
    IN p_ID_SERVICIO INT,
    IN p_ID_MEDICO INT,
    IN p_FECHA_PRESTACION DATETIME,
    IN p_DIAGNOSTICO TEXT
)
BEGIN
    DECLARE v_ID_SOL INT;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;
    
    START TRANSACTION;
    
    CASE p_Operacion
        WHEN 'C' THEN
            INSERT INTO SOLICITUD (ID_ESTUDIANTE, TIPO_SOLICITUD) VALUES (p_ID_ESTUDIANTE, 'Servicio');
            SET v_ID_SOL = LAST_INSERT_ID();
            INSERT INTO SOLICITUD_SERVICIO (ID_SOLICITUD, ID_SERVICIO, ID_MEDICO, FECHA_PRESTACION) 
            VALUES (v_ID_SOL, p_ID_SERVICIO, p_ID_MEDICO, p_FECHA_PRESTACION);
            SELECT LAST_INSERT_ID() AS ID_SOLICITUD_SERVICIO;
            
        WHEN 'R' THEN
            SELECT SS.ID_SOLICITUD_SERVICIO, S.ID_ESTUDIANTE, CONCAT(E.NOMBRE, ' ', E.APELLIDO) AS Estudiante, 
                   SS.FECHA_PRESTACION, SS.DIAGNOSTICO, SV.NOMBRE_SERVICIO
            FROM SOLICITUD_SERVICIO SS
            JOIN SOLICITUD S ON SS.ID_SOLICITUD = S.ID_SOLICITUD
            JOIN ESTUDIANTE E ON S.ID_ESTUDIANTE = E.ID_ESTUDIANTE
            JOIN SERVICIO_BIENESTAR SV ON SS.ID_SERVICIO = SV.ID_SERVICIO
            WHERE (p_ID_MEDICO IS NULL OR SS.ID_MEDICO = p_ID_MEDICO)
            AND (SS.ID_SOLICITUD_SERVICIO = p_ID_SOLICITUD_SERVICIO OR p_ID_SOLICITUD_SERVICIO IS NULL);
            
        WHEN 'U' THEN
            UPDATE SOLICITUD_SERVICIO SET DIAGNOSTICO = p_DIAGNOSTICO 
            WHERE ID_SOLICITUD_SERVICIO = p_ID_SOLICITUD_SERVICIO;
            
    END CASE;
    
    COMMIT;
END //

DELIMITER ;

-- ===========================
-- TRIGGERS
-- ===========================

DELIMITER //

-- Trigger para validar cupo de actividad
CREATE TRIGGER tr_ValidarCupoActividad
    BEFORE INSERT ON INSCRIPCION
    FOR EACH ROW
BEGIN
    DECLARE v_CupoMaximo INT;
    DECLARE v_CupoActual INT;
    
    SELECT CUPO_MAXIMO INTO v_CupoMaximo 
    FROM ACTIVIDAD 
    WHERE ID_ACTIVIDAD = NEW.ID_ACTIVIDAD;
    
    SELECT COUNT(*) INTO v_CupoActual 
    FROM INSCRIPCION 
    WHERE ID_ACTIVIDAD = NEW.ID_ACTIVIDAD;
    
    IF v_CupoActual >= v_CupoMaximo THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: No hay cupo disponible para esta actividad';
    END IF;
END //

-- Trigger para auditoría de solicitudes
CREATE TRIGGER tr_AuditoriaSolicitudes
    AFTER UPDATE ON SOLICITUD
    FOR EACH ROW
BEGIN
    IF OLD.ESTADO != NEW.ESTADO THEN
        INSERT INTO AUDITORIA_SOLICITUDES (ID_SOLICITUD, ESTADO_ANTERIOR, ESTADO_NUEVO)
        VALUES (NEW.ID_SOLICITUD, OLD.ESTADO, NEW.ESTADO);
    END IF;
END //

-- Trigger para validar beca única
CREATE TRIGGER tr_ValidarBecaUnica
    BEFORE INSERT ON SOLICITUD
    FOR EACH ROW
BEGIN
    DECLARE v_BecasActivas INT DEFAULT 0;
    
    IF NEW.TIPO_SOLICITUD = 'Beca' THEN
        SELECT COUNT(*) INTO v_BecasActivas
        FROM SOLICITUD
        WHERE TIPO_SOLICITUD = 'Beca' 
        AND ESTADO = 'Aprobada' 
        AND ID_ESTUDIANTE = NEW.ID_ESTUDIANTE;
        
        IF v_BecasActivas > 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: El estudiante ya tiene una beca activa';
        END IF;
    END IF;
END //

-- Trigger para validar asistencia
CREATE TRIGGER tr_ValidarAsistencia
    BEFORE INSERT ON ASISTENCIA
    FOR EACH ROW
BEGIN
    DECLARE v_Existe INT DEFAULT 0;
    
    SELECT COUNT(*) INTO v_Existe
    FROM INSCRIPCION
    WHERE ID_INSCRIPCION = NEW.ID_INSCRIPCION;
    
    IF v_Existe = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: El estudiante no está inscrito en esta actividad';
    END IF;
END //

DELIMITER ;

-- ===========================
-- DATOS DE PRUEBA
-- ===========================

-- Usuarios (contraseñas en texto sólo de prueba; en producción almacenar hashed)
INSERT INTO USUARIO (NOMBRE_USUARIO, CONTRA, ROL) VALUES
('admin','admin123','Administrador'),
('medico1','medico123','Medico'),
('estudiante1','estudiante123','Estudiante');

-- Administrador
INSERT INTO ADMINISTRADOR (ID_USUARIO, NOMBRE, APELLIDO) VALUES (1, 'Carlos', 'Perez');

-- Médico
INSERT INTO MEDICO (ID_USUARIO, NOMBRE, APELLIDO, ESPECIALIDAD) VALUES (2, 'Maria', 'Gomez', 'Medicina General');

-- Estudiante
INSERT INTO ESTUDIANTE (ID_USUARIO, NUMERO_MATRICULA, NOMBRE, APELLIDO, CARRERA, FECHA_NACIMIENTO, CORREO_ELECTRONICO)
VALUES (3, 'MAT2024001', 'Juan', 'Lopez', 'Ingeniería Informática', '2000-05-15', 'juan@universidad.edu');

-- Actividad
INSERT INTO ACTIVIDAD (ID_ADMINISTRADOR, NOMBRE_ACTIVIDAD, DESCRIPCION, FECHA_HORA, CUPO_MAXIMO, UBICACION, TIPO_ACTIVIDAD)
VALUES (1, 'Taller de SQL', 'Taller práctico de bases de datos', DATE_ADD(NOW(), INTERVAL 7 DAY), 30, 'Aula 101', 'Académico');

-- Beca
INSERT INTO BECA (NOMBRE_BECA, DESCRIPCION, MONTO, REQUISITOS, FECHA_INICIO)
VALUES ('Beca Excelencia', 'Para estudiantes con promedio alto', 500.00, 'Promedio mayor a 9.0', CURDATE());

-- Servicio
INSERT INTO SERVICIO_BIENESTAR (NOMBRE_SERVICIO, DESCRIPCION, TIPO_PROFESIONAL)
VALUES ('Consulta Médica General', 'Consulta básica de medicina general', 'Medico');

-- Pruebas rápidas de procedimientos
CALL sp_GestionActividades('R', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
CALL sp_GestionSolicitudesBecas('R', NULL, NULL, NULL, NULL, NULL);

-- Mostrar algunas tablas para verificar
SELECT * FROM USUARIO LIMIT 10;
SELECT * FROM ESTUDIANTE LIMIT 10;
SELECT * FROM ACTIVIDAD LIMIT 10;

SELECT 'Conversión a MySQL completada exitosamente!' AS Status;